# function hashing

import json
import struct
 
def function_hash(function_name):
    hash_data = 0
    init = 0x2B
    for character in function_name:
        init = ord(character) + 0x10F * init
    hash_data = init
    return hex(hash_data &0x1FFFFF)

# print(function_hash("CreateProcess"))

def deobfuscate_hash(data):
    return hex((data ^ (data << 16) ^ 0x97E81919) & 0x1FFFFF) 

# print(deobfuscate_hash(0x4BFC801E))
export_info = {}
with open("exports.json", 'r') as NFILE:
    export_info = json.load(NFILE)

hash_table = {}
for export in export_info['exports']:
    function_hashed_data = function_hash(export)
    hash_table.update({function_hashed_data: export})

def deobfuscate_hashes(start_address):
    start = start_address
    for address in range(0, 780, 4):
        obfuscated_hash = idc.get_wide_dword(start)
        deobfuscated_hash = deobfuscate_hash(obfuscated_hash)
        if deobfuscated_hash in hash_table.keys():
            idc.set_name(start, hash_table[deobfuscated_hash])
        start+=4