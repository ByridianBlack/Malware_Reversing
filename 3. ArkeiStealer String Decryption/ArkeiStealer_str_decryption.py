
import base64

'''
    Created by ByridianBlack. Use, edit, analyze. Free to use for by anyone.

    Does Base64 decoding and rc4 decrypts with the key: 77307071305441676495.

    To use call string_decryption(start_address, end_address).

    Was made with python 3.8.10
'''
def rc4_key_setup(key):
    S = []
    for items in range(256):
        S.append(items)
    j = 0
    for i in range(256):
        j = (j + S[i] + ord(key[i % (len(key))])) % 256
        S[i], S[j] = S[j], S[i]
    return S
def rc4_decryption(data, key):
    S = rc4_key_setup(key)
    
    i = 0
    j = 0
    output = []
    for x in data:
        
        i = (i + 1) % 256
        j = (j + S[i]) % 256
        S[i], S[j] = S[j], S[i]
        K = chr(ord(chr(x)) ^ S[(S[i] + S[j]) % 256])
        output.append(K)
    print("".join(output))
    return "".join(output)

def decryption(data):
    key = "77307071305441676495"
    decoded_data = bytes(base64.b64decode(data))
    return rc4_decryption(decoded_data, key)
def replace_data(ea, new_string):
    ea_start = ea
    for s in new_string:
        patch_byte(ea, ord(s))
        ea+=1
    while ord(get_bytes(ea, 1)) != 0:
        patch_byte(ea, 0)
        ea+=1
    create_strlit(ea_start, idc.BADADDR)

def string_decryption(start, end):

    data = b''
    start_index = 0
    for ea in range(start, end):
        
        byte_data = get_bytes(ea, 1)
        if ord(byte_data) == 0:
            if data == b'':
                start = 0
                continue
            data = data.decode("utf-8")
            data = decryption(data)
            replace_data(start, data)
            print(data)
            data = b''
            start = 0
        else:
            if start == 0:
                start = ea
            data += byte_data

